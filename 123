# main
import asyncio
import logging
from aiogram import Bot, Dispatcher
from config import TOKEN
from app.handlers import router
from app.rose import rose_router

bot = Bot(token=TOKEN)
dp = Dispatcher()

dp.include_router(router)
dp.include_router(rose_router)

# logger
logging.basicConfig(
    level=logging.INFO,
    format= '%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def main():
    try:
        logger.info('= - = - = - = - = - Bot has been started! = - = - = - = - = -')
        logger.info("Starting polling...")
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        logger.info("Stopped by user.")
    except Exception as e:
        logger.error(f"Error: {e}")
    finally:
        await on_shutdown()
        
async def on_shutdown():
    logger.info("Stopping bot...")
    await bot.session.close()
    logger.info("= - = - = - = - = - Bot has been stopped! = - = - = - = - = -")

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Program was stoped by user.")
    except Exception as e:
        logger.error(f"Unexpected error: {e}")

# python 3.13.0 | aiogram 3.17.0 | last format day 23.01.2025 - 20:46 | RoseBot - @regwid_RoseBot


# config
TOKEN = '7749624540:AAFYF2eqO4M6uYVTUlWH1aEe7sZUyf-r3mc'
OWNER_ID = '1723389170'
ACHIEVEMENTS_FILE = "achievements.json"
DATA_FILE = "user_data.json"
BOOSTY = 'https://boosty.to/regw1d'
DONATE = 'https://www.donationalerts.com/r/regw1d'
CHANNEL = 'https://t.me/+2oWmBhIhLjw5OWI6'
RULES = 'https://telegra.ph/RoseBot-Rules-RUEN-11-20'

# settings
MIN_ROSE_CHANGE = -5  # min
MAX_ROSE_CHANGE = 10  # max
DELAY = 2 * 60 * 60 # delay -> 2h
#chance change = 6,666666666666667% or 6,66% or ~7%



# handlers
from aiogram import Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest
from app.keyboards import donate_keyboard, stats_keyboard
from app.rose import handle_rose_command, get_rose_word_form
from config import RULES, CHANNEL, DATA_FILE, ACHIEVEMENTS_FILE
import json

router = Router()
PAGE_SIZE = 15
hotwords_list = ['—Ä–æ–∑–∞', '—Ü–≤–µ—Ç–æ–∫', '–∫—Ä–∞—Å–Ω—ã–π']

# save/load user_data
def load_user_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}
def save_user_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# save/load achie
def load_achievements():
    try:
        with open(ACHIEVEMENTS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}
def save_achievements(achievements):
    with open(ACHIEVEMENTS_FILE, "w", encoding="utf-8") as f:
        json.dump(achievements, f, ensure_ascii=False, indent=4)

# commands
@router.message(CommandStart())
async def start(message: Message):
    await message.reply(
        f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}üåπ.\n'
        '–≠—Ç–æ –ø–µ—Ä–≤—ã–π –ø–æ–ª—É-–∑–∞–∫–æ–Ω—á–µ–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –æ—Ç @regwid1337, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –¢–ì –±–æ—Ç–æ–º –∏... –†–æ–∑–∞–º–∏.\n'
        '–î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ–ø–∏—à–∏ /rules –∏–ª–∏ /help.'
    )

@router.message(Command("help"))
async def help(message: Message):
    await message.reply(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"
        "üîπ /start ‚Äì –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –±–æ—Ç.\n"
        "üîπ /help ‚Äì –û—Ç–∫—Ä–æ–π—Ç–µ —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏.\n"
        "üîπ /rose ‚Äì –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–æ–∑.\n"
        "üîπ /hotwords ‚Äì –ì–æ—Ä—è—á–∏–µ —Å–ª–æ–≤–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –±–æ—Ç.\n"
        "üîπ /donate ‚Äì –ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞! –ù–µ–º–Ω–æ–≥–æ —Ö–æ—á–µ—Ç—Å—è –∫—É—à–∞—Ç—å üòä.\n"
        "üîπ /stats ‚Äì –£–∑–Ω–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–æ–∑.\n"
        "üîπ /fstats ‚Äì –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑ —Å—Ç—Ä–∞–Ω–∏—Ü (–ø—Ä–æ–∂–∏–º–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –õ–°!).\n"
        "üîπ /achie ‚Äì –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.\n"
        "üîπ /rules ‚Äì –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.\n"
        "üîπ /helpersdev ‚Äì –°–ø–∏—Å–æ–∫ –ª—é–¥–µ–π, –ø–æ–º–æ–≥–∞–≤—à–∏—Ö –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞.\n"
        "üîπ /regchan ‚Äì –ö–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ –æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
        "üü• /seasons ‚Äì –£–∑–Ω–∞–π—Ç–µ –ø—Ä–æ —Å–µ–∑–æ–Ω—ã. (WIP)\n"
        "üõ† –í–∞–∂–Ω–æ! –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏,\n"
        "—Å–æ–¥–µ—Ä–∂–∞—â–∏–º–∏ '–≥–æ—Ä—è—á–∏–µ —Å–ª–æ–≤–∞', –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –¥–∞—Ç—å –±–æ—Ç—É –ø–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    )

@router.message(Command("hotwords"))
async def hotwords(message: Message):
    await message.reply('–•–æ—Ç-–≤–æ—Ä–¥—ã –±–æ—Ç–∞: —Ä–æ–∑–∞, —Ü–≤–µ—Ç–æ–∫, –∫—Ä–∞—Å–Ω—ã–π.')

@router.message(lambda message: message.text and not message.text.startswith('/') and any(word in message.text.lower() for word in hotwords_list))
async def handle_hotwords(message: Message):
    await handle_rose_command(message)

@router.message(Command("donate"))
async def donate(message: Message):
    markup = donate_keyboard()
    await message.reply("–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ –º–æ–∂–Ω–æ —Ç—É—Ç:", reply_markup=markup)

@router.callback_query(lambda c: c.data == "donate:stars")
async def handle_stars_donate(callback: CallbackQuery):
    await callback.answer("–ê–Ω–ª–∞–∫(")
    await callback.message.reply("–ü–æ–∫–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª((")

@router.message(Command("stats"))
async def handle_stats_command(message: Message):
    await show_page_stats(message.bot, message.chat.id, message.message_id, page=0)

async def show_page_stats(bot, chat_id, message_id, page: int):
    data = load_user_data()
    if not data:
        await bot.send_message(chat_id=chat_id, text="–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –≤—ã—Ä–∞—â–∏–≤–∞–ª —Ä–æ–∑—ã.")
        return

    stats = sorted(data.items(), key=lambda x: x[1]['roses'], reverse=True)
    total_pages = (len(stats) + PAGE_SIZE - 1) // PAGE_SIZE
    start = page * PAGE_SIZE
    end = start + PAGE_SIZE
    current_page = stats[start:end]

    if not current_page:
        await bot.send_message(chat_id=chat_id, text="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    stats_message = "üåπ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for i, (user_id, user_data) in enumerate(current_page, start=start + 1):
        stats_message += f"{i}. {user_data['username']} ({user_data['nickname']}): {user_data['roses']} {get_rose_word_form(user_data['roses'])}\n"
    markup = stats_keyboard(page, total_pages)
    try:
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=stats_message, reply_markup=markup)
    except TelegramBadRequest:
        await bot.send_message(chat_id=chat_id, text=stats_message, reply_markup=markup)

@router.callback_query(lambda c: c.data and c.data.startswith("stats:"))
async def handle_stats_pagination(callback: CallbackQuery):
    page = int(callback.data.split(":")[1])
    await show_page_stats(callback.bot, callback.message.chat.id, callback.message.message_id, page=page)
    await callback.answer()

@router.message(Command("fstats"))
async def show_full_statistics(message: Message):
    if message.chat.type != "private":
        await message.reply("–ö–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –õ–° —Å –±–æ—Ç–æ–º!")
        return

    data = load_user_data()
    if not data:
        await message.reply("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –≤—ã—Ä–∞—â–∏–≤–∞–ª —Ä–æ–∑—ã.")
        return

    stats = sorted(data.items(), key=lambda x: x[1]['roses'], reverse=True)
    stats_message = "üåπ –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for i, (user_id, user_data) in enumerate(stats, start=1):
        stats_message += f"{i}. {user_data['username']} ({user_data['nickname']}): {user_data['roses']} {get_rose_word_form(user_data['roses'])}\n"

    await message.reply(stats_message)

@router.message(Command("achie"))
async def show_achievements(message: Message):
    user_id = str(message.from_user.id)
    achievements = load_achievements()

    if user_id not in achievements or not achievements[user_id]:
        await message.reply("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.")
        return

    user_achievements = achievements[user_id]
    response = "–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n\n"

    usage_achievements = [
        {"name": "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏!", "count": 5, "description": "5 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∫–æ–º–∞–Ω–¥—ã /rose!"},
        {"name": "–õ—é–±–∏—Ç–µ–ª—å –≤—Ä–µ–º–µ–Ω–∏!", "count": 25, "description": "25 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∫–æ–º–∞–Ω–¥—ã /rose!"},
        {"name": "–í –ø–æ–ø—ã—Ç–∫–∞—Ö –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ...", "count": 50, "description": "50 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∫–æ–º–∞–Ω–¥—ã /rose!"},
        {"name": "–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–π –≤–æ –≤—Ä–µ–º–µ–Ω–∏...", "count": 80, "description": "80 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∫–æ–º–∞–Ω–¥—ã /rose!"},
        {"name": "–ß—Ç–æ —Ç–∞–∫–æ–µ –≤—Ä–µ–º—è?", "count": 200, "description": "200 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∫–æ–º–∞–Ω–¥—ã /rose!"}
    ]

    rose_achievements = [
        {"name": "–ü–µ—Ä–≤—ã–µ —Ä–æ–∑—ã!", "count": 11, "description": "–ü–æ–ª—É—á–∏—Ç–µ 11 —Ä–æ–∑!"},
        {"name": "50 —Ä–æ–∑!", "count": 50, "description": "–°–æ–±–µ—Ä–∏—Ç–µ 50 —Ä–æ–∑!"},
        {"name": "101 —Ä–æ–∑–∞!", "count": 101, "description": "–°–æ–±–µ—Ä–∏—Ç–µ 101 —Ä–æ–∑—É!"},
        {"name": "200 —Ä–æ–∑!", "count": 200, "description": "–°–æ–±–µ—Ä–∏—Ç–µ 200 –∫—Ä–∞—Å–Ω—ã—Ö —Ü–≤–µ—Ç–∫–æ–≤!"},
        {"name": "500 —Ä–æ–∑!", "count": 500, "description": "–°–æ–±–µ—Ä–∏—Ç–µ 500 –∞–ª—ã—Ö —Ü–≤–µ—Ç–æ–≤!"}
    ]

    all_achievements = usage_achievements + rose_achievements

    for achie_name in user_achievements:
        detail = next((d for d in all_achievements if d["name"] == achie_name), None)
        if detail:
            response += f"üåü *{detail['name']}*\nüìñ {detail['description']}\n\n"
        else:
            response += f"üåü *{achie_name}*\n"

    await message.reply(response, parse_mode="Markdown")

@router.message(Command("rules"))
async def rules(message: Message):
    await message.reply(f'–ü—Ä–∞–≤–∏–ª–∞ –±–æ—Ç–∞ ‚¨áÔ∏è:\n {RULES}')

@router.message(Command("seasons"))
async def seasons(message: Message):
    await message.reply('None')

@router.message(Command("helpersdev"))
async def helpersdev(message: Message):
    await message.reply(
        'üíµ Boosty:\n'
        'xenonity - 43 —Ä—É–±\n'
        'Aizava - 30 —Ä—É–±\n'
        'üí∞ DonationAlerts:\n'
        'De4thlxrd - 26 —Ä—É–±\n'
        'üßë‚Äçüíª Helpdev:\n'
        'Eselty, MaDeInCCCP'
    )

@router.message(Command("regchan"))
async def regchan(message: Message):
    await message.reply(f'–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:\n {CHANNEL}')


# rose
from config import DELAY, MIN_ROSE_CHANGE, MAX_ROSE_CHANGE, DATA_FILE, ACHIEVEMENTS_FILE
from datetime import datetime, timedelta
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
import random
import json

rose_router = Router()

def get_current_time():
    return datetime.now()

def format_remaining_time(remaining_time):
    hours, remainder = divmod(remaining_time.total_seconds(), 3600)
    minutes, seconds = divmod(remainder, 60)
    return f"{int(hours)} —á. {int(minutes)} –º–∏–Ω. {int(seconds)} —Å–µ–∫."

def get_rose_word_form(number):
    if number % 10 == 1 and number % 100 != 11:
        return "—Ä–æ–∑–∞"
    elif 2 <= number % 10 <= 4 and (number % 100 < 10 or number % 100 >= 20):
        return "—Ä–æ–∑—ã"
    else:
        return "—Ä–æ–∑"

def can_use_rose(last_used_time):
    if last_used_time:
        elapsed_time = get_current_time() - datetime.fromtimestamp(last_used_time)
        return elapsed_time.total_seconds() >= DELAY
    return True

def load_user_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_user_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

def load_achievements():
    try:
        with open(ACHIEVEMENTS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_achievements(achievements):
    with open(ACHIEVEMENTS_FILE, "w", encoding="utf-8") as f:
        json.dump(achievements, f, ensure_ascii=False, indent=4)

def check_achievements(user_data):
    achievements = load_achievements()
    user_id = user_data["user_id"]

    if user_id not in achievements:
        achievements[user_id] = []

    new_achievements = []

    usage_achievements = [
        {"name": "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏!", "count": 5, "description": "5 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∫–æ–º–∞–Ω–¥—ã /rose!"},
        {"name": "–õ—é–±–∏—Ç–µ–ª—å –≤—Ä–µ–º–µ–Ω–∏!", "count": 25, "description": "25 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∫–æ–º–∞–Ω–¥—ã /rose!"},
        {"name": "–í –ø–æ–ø—ã—Ç–∫–∞—Ö –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ...", "count": 50, "description": "50 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∫–æ–º–∞–Ω–¥—ã /rose!"},
        {"name": "–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–π –≤–æ –≤—Ä–µ–º–µ–Ω–∏...", "count": 80, "description": "80 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∫–æ–º–∞–Ω–¥—ã /rose!"},
        {"name": "–ß—Ç–æ —Ç–∞–∫–æ–µ –≤—Ä–µ–º—è?", "count": 200, "description": "200 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∫–æ–º–∞–Ω–¥—ã /rose!"}
    ]

    rose_achievements = [
        {"name": "–ü–µ—Ä–≤—ã–µ —Ä–æ–∑—ã!", "count": 11, "description": "–ü–æ–ª—É—á–∏—Ç–µ 11 —Ä–æ–∑!"},
        {"name": "50 —Ä–æ–∑!", "count": 50, "description": "–°–æ–±–µ—Ä–∏—Ç–µ 50 —Ä–æ–∑!"},
        {"name": "101 —Ä–æ–∑–∞!", "count": 101, "description": "–°–æ–±–µ—Ä–∏—Ç–µ 101 —Ä–æ–∑—É!"},
        {"name": "200 —Ä–æ–∑!", "count": 200, "description": "–°–æ–±–µ—Ä–∏—Ç–µ 200 –∫—Ä–∞—Å–Ω—ã—Ö —Ü–≤–µ—Ç–∫–æ–≤!"},
        {"name": "500 —Ä–æ–∑!", "count": 500, "description": "–°–æ–±–µ—Ä–∏—Ç–µ 500 –∞–ª—ã—Ö —Ü–≤–µ—Ç–æ–≤!"}
    ]

    for achie in usage_achievements:
        if user_data["use_count"] >= achie["count"] and achie["name"] not in achievements[user_id]:
            achievements[user_id].append(achie["name"])
            new_achievements.append(achie["name"])

    for achie in rose_achievements:
        if user_data["roses"] >= achie["count"] and achie["name"] not in achievements[user_id]:
            achievements[user_id].append(achie["name"])
            new_achievements.append(achie["name"])

    save_achievements(achievements)
    return new_achievements

@rose_router.message(Command("rose"))
async def handle_rose_command(message: Message):
    if message.chat.type not in ["group", "supergroup"]:
        await message.reply("–ü–æ–ø—Ä–æ–±—É–π –¥–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∏ –≤–æ–∑–º–æ–∂–Ω–æ... –Ø –Ω–∞—á–Ω—É —Ä–∞–±–æ—Ç–∞—Ç—å")
        return

    user_id = str(message.from_user.id)
    username = message.from_user.username or "Unknown"
    nickname = message.from_user.first_name or "User"

    data = load_user_data()
    user_data = data.get(user_id, {
        "user_id": user_id,
        "nickname": nickname,
        "username": username,
        "roses": 0,
        "last_used_time": 0,
        "use_count": 0,
    })

    last_used_time = user_data.get("last_used_time", 0)

    if not can_use_rose(last_used_time):
        remaining_time = timedelta(seconds=DELAY) - (get_current_time() - datetime.fromtimestamp(last_used_time))
        await message.reply(
            f"–¢—ã —É–∂–µ —Ä–∞—Å—Ç–∏–ª(–∞) —Ä–æ–∑—ã.\n –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ ~\n {format_remaining_time(remaining_time)}\n"
            f"–£ –≤–∞—Å {user_data['roses']} {get_rose_word_form(user_data['roses'])}."
        )
        return

    new_roses = random.randint(MIN_ROSE_CHANGE, MAX_ROSE_CHANGE)
    user_data["roses"] += new_roses
    user_data["last_used_time"] = get_current_time().timestamp()
    user_data["use_count"] += 1
    data[user_id] = user_data
    save_user_data(data)

    await message.reply(
        f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {new_roses} {get_rose_word_form(new_roses)}!\n"
        f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å {user_data['roses']} {get_rose_word_form(user_data['roses'])}."
    )

    new_achievements = check_achievements(user_data)
    for achie in new_achievements:
        await message.reply(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ:\n {achie}")


# keyboards
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import BOOSTY, DONATE

def donate_keyboard():
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ë—É—Å—Ç–∏–∫!", url=BOOSTY)],
        [InlineKeyboardButton(text="–î–æ–Ω–∞—Ç –ê–ª–µ—Ä—Ç—Å!", url=DONATE)],
        [InlineKeyboardButton(text="Telegram Stars", callback_data="donate:stars")]
    ])
    return markup

def stats_keyboard(page: int, total_pages: int):
    buttons = []
    if page > 0:
        buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"stats:{page - 1}"))
    if page < total_pages - 1:
        buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"stats:{page + 1}"))
    return InlineKeyboardMarkup(inline_keyboard=[buttons] if buttons else [])

